/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate
         * @description Authenticates the user and returns the Bearer token
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unauthenticate
         * @description Unauthenticate the user
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update campaign
         * @description Update campaign
         */
        patch: operations["updateCampaign"];
        trace?: never;
    };
    "/csrf-cookie": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get CSRF Cookie
         * @description To authenticate your SPA, your SPA's 'login' page should first make a request to the /sanctum/csrf-cookie endpoint to initialize CSRF protection for the application. https://laravel.com/docs/9.x/sanctum#spa-authentication
         */
        get: operations["csrfCookie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Display authenticated user
         * @description Display authenticated user
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{id}/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Display a listing of the resource.
         * @description Display a listing of the resource.
         */
        get: operations["getWorkspaceCampaignsList"];
        put?: never;
        /**
         * Create campaign
         * @description Create campaign
         */
        post: operations["storeWorkspaceCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Meta data */
        meta: {
            /**
             * Current Page
             * @example 1
             */
            current_page?: number;
            /**
             * Last Page
             * @example 1
             */
            last_page?: number;
            /**
             * Per Page
             * @example 30
             */
            per_page?: number;
            /**
             * Total
             * @example 100
             */
            total?: number;
        };
        /**
         * CampaignResource
         * @description Campaign resource
         */
        CampaignResource: {
            /**
             * ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * Title
             * @example Example Campaign
             */
            title?: string;
            /**
             * Landing Page Url
             * @example https://example.com/
             */
            landing_page_url?: string;
            /**
             * Activity Status
             * @example active
             */
            activity_status?: string;
            payouts?: components["schemas"]["PayoutResource"][];
        };
        /**
         * CountryResource
         * @description Country resource
         */
        CountryResource: {
            /**
             * ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * Name
             * @example Estonia
             */
            name?: string;
        };
        /**
         * CampaignResource
         * @description Campaign resource
         */
        PayoutResource: {
            /**
             * ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * Title
             * @example Example Campaign
             */
            amount_per_interaction?: string;
            country?: components["schemas"]["CountryResource"];
        };
        /**
         * UserResource
         * @description User resource
         */
        UserResource: {
            /**
             * ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * Name
             * @example Test
             */
            name?: string;
            /**
             * Email
             * @example hello@example.com
             */
            email?: string;
            workspaces?: components["schemas"]["WorkspaceResource"][];
        };
        /**
         * WorkspaceResource
         * @description Workspace resource
         */
        WorkspaceResource: {
            /**
             * ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * Name
             * @example My Workspace
             */
            name?: string;
        };
    };
    responses: {
        /** @description Created */
        201: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description No Content */
        204: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Unauthenticated */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Session expired */
        419: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Unprocessable Content */
        422: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Server Error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Service Unavailable - Maintenance Mode */
        503: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Successful operation */
        resources: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Successful operation */
        resource: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
    };
    parameters: {
        /** @description Resource id */
        id: string;
        /** @description Page number */
        "page[number]": number;
        /** @description Page size */
        "page[size]": number;
        /** @description Sort by */
        sort: string;
        /** @description Include relationships */
        include: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    phone?: string;
                    code?: string;
                    device_name?: string;
                } | {
                    email?: string;
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            204: components["responses"]["204"];
            422: components["responses"]["422"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["204"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    updateCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "active"
                 *     } */
                "application/json": {
                    /** @enum {string} */
                    activity_status?: "active" | "paused";
                };
            };
        };
        responses: {
            204: components["responses"]["204"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    csrfCookie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["204"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    getUser: {
        parameters: {
            query?: {
                /** @description Include relationships */
                include?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResource"];
                    };
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    getWorkspaceCampaignsList: {
        parameters: {
            query?: {
                /** @description Page number */
                "page[number]"?: components["parameters"]["page[number]"];
                /** @description Page size */
                "page[size]"?: components["parameters"]["page[size]"];
                /** @description Include relationships */
                include?: string;
            };
            header?: never;
            path: {
                /** @description Resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CampaignResource"][];
                        meta?: components["schemas"]["meta"];
                    };
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
    storeWorkspaceCampaign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Resource id */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Example Campaign",
                 *       "landing_page_url": "https://google.com/"
                 *     } */
                "application/json": {
                    title?: string;
                    landing_page_url?: string;
                };
            };
        };
        responses: {
            201: components["responses"]["201"];
            204: components["responses"]["204"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
            503: components["responses"]["503"];
        };
    };
}
